5/
[01;32mmaster10@etse-75-51[00m:[01;34m~/scene-classificator[00m$ ls
[0m[01;34mdata[0m     [01;35mmodelMLP.png[0m  partial_out.txt  Pipfile.lock  [01;34mresults[0m      screenlog.m3_64  session5.log
LICENSE  [01;34mold_data[0m      Pipfile          README.md     screenlog.0  session4.log     [01;34msource[0m
[01;32mmaster10@etse-75-51[00m:[01;34m~/scene-classificator[00m$ lsmv screenlog.m3_64 results/session5/[C[C[C[C[C[C[C[C[C[C[C[C[C[1@0[1P[1P[1P[1P[1P results/session5/[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C[C
[01;32mmaster10@etse-75-51[00m:[01;34m~/scene-classificator[00m$ nano[K[K[K[Knano source/session5.
session5.log  session5.py   
[01;32mmaster10@etse-75-51[00m:[01;34m~/scene-classificator[00m$ nano source/session5.py 
[?1049h[1;25r(B[m[4l[?7h[?1h=[?1h=[?1h=[39;49m[?25l[39;49m(B[m[H[2J[23;44H(B[0;7m[ Leyendo archivo ][3d(B[m[23;43H(B[0;7m[ 261 lÃ­neas leÃ­das ][3d(B[m[?12l[?25h[H[39;49m(B[0;7m  GNU nano 2.5.3                  Archivo: source/session5.py                                            [3;1H(B[0;1m[36mimport[39m(B[m getpass[4d(B[0;1m[36mimport[39m(B[m logging[5d(B[0;1m[36mimport[39m(B[m os[6d(B[0;1m[36mimport[39m(B[m sys[7d(B[0;1m[36mimport[39m(B[m time[9d(B[0;1m[31m# Set python path to allow acceding to the modules inside /source without need[10d# to specify 'from source ...'[11d[39m(B[msys.path.append(os.path.dirname(os.path.dirname(__file__)))[13d(B[0;1m[31m# Config to run on one GPU[14d#os.environ["CUDA_VISIBLE_DEVICES"] = getpass.getuser()[-1][15d#os.environ["CUDA_VISIBLE_DEVICES"] = '0,1,2,3'[16d[39m(B[mos.environ[(B[0;1m[32m"CUDA_VISIBLE_DEVICES"[39m(B[m] = (B[0;1m[32m'5,6,7,9'[18d[36mfrom[39m(B[m GPyOpt.methods (B[0;1m[36mimport[39m(B[m BayesianOptimization[19d(B[0;1m[36mfrom[39m(B[m keras (B[0;1m[36mimport[39m(B[m Input, optimizers[20d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dropout[21d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dense[22d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Flatten[24d(B[0;7m^G(B[m Ver ayuda   (B[0;7m^O(B[m Guardar     (B[0;7m^W(B[m Buscar[46G(B[0;7m^K(B[m Cortar Texto(B[0;7m^J(B[m Justificar  (B[0;7m^C(B[m PosiciÃ³n    (B[0;7m^Y(B[m PÃ¡g. ant.[25d(B[0;7m^X(B[m Salir[16G(B[0;7m^R(B[m Leer fich.  (B[0;7m^\(B[m Reemplazar  (B[0;7m^U(B[m Pegar txt   (B[0;7m^T(B[m Corrector   (B[0;7m^_(B[m Ir a lÃ­nea  (B[0;7m^V(B[m PÃ¡g. sig.[3d[4d[5d[6d[7d[8d[9d[10d[11d[12d[13d[14d[15d[16d[A[A[1;94H(B[0;7mModificado[14d(B[mos.environ[(B[0;1m[32m"CUDA_VISIBLE_DEVICES"[39m(B[m] = getpass.getuser()[-1] [15d[15;22r[22;1H
[1;25r[22;1H(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m MaxPooling2D[15d[15;22r[22;1H
[1;25r[22;1H(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Conv2D[15d[23d(B[0;7mNombre del archivo a escribir: source/session5.py                                                        [24;16H(B[m      (B[0;7mM-D(B[m Format DOS       (B[0;7mM-A(B[m AÃ±adir           (B[0;7mM-B(B[m Respald fich[K[25;2H(B[0;7mC(B[m Cancelar          (B[0;7mM-M(B[m Format Mac       (B[0;7mM-P(B[m Anteponer        (B[0;7m^T(B[m A Ficheros[K[23;50H[?25l[23;41H[39;49m(B[m[1K (B[0;7m[ 259 lÃ­neas escritas ](B[m[K[15d[?12l[?25h[1;94H(B[0;7m          [24;16H^O(B[m Guardar     (B[0;7m^W(B[m Buscar      (B[0;7m^K(B[m Cortar Texto(B[0;7m^J(B[m Justificar  (B[0;7m^C(B[m PosiciÃ³n    (B[0;7m^Y(B[m PÃ¡g. ant.[25;2H(B[0;7mX(B[m Salir       (B[0;7m^R(B[m Leer fich.  (B[0;7m^\(B[m Reemplazar  (B[0;7m^U(B[m Pegar txt   (B[0;7m^T(B[m Corrector   (B[0;7m^_(B[m Ir a lÃ­nea  (B[0;7m^V(B[m PÃ¡g. sig.[15d[16d[17d[18d[19d[20d[21d[22d[3dos.environ[(B[0;1m[32m"CUDA_VISIBLE_DEVICES"[39m(B[m] = getpass.getuser()[-1][4d[K[5d(B[0;1m[36mfrom[39m(B[m GPyOpt.methods (B[0;1m[36mimport[39m(B[m BayesianOptimization[6d(B[0;1m[36mfrom[39m(B[m keras (B[0;1m[36mimport[39m(B[m Input, optimizers[7d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dropout[8d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dense[9d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Flatten[K[10d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m MaxPooling2D[11d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Conv2D[K[12d(B[0;1m[36mfrom[39m(B[m keras.models (B[0;1m[36mimport[39m(B[m Model[13d(B[0;1m[36mimport[39m(B[m numpy (B[0;1m[36mas[39m(B[m np[K[14d(B[0;1m[36mimport[39m(B[m matplotlib[K[16d(B[0;1m[31m# Force matplotlib to not use any Xwindows backend. If you need to import[17d# pyplot, do it after setting `Agg` as the backend.[18d[39m(B[mmatplotlib.use((B[0;1m[32m'Agg'[39m(B[m)[K[19d[K[20;6Hsource (B[0;1m[36mimport[39m(B[m TEST_PATH[K[21;6Hsource (B[0;1m[36mimport[39m(B[m VALIDATION_PATH   [22;6Hsource (B[0;1m[36mimport[39m(B[m TRAIN_PATH  [12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d[3d(B[0;1m[36mimport[39m(B[m matplotlib[K[5d(B[0;1m[31m# Force matplotlib to not use any Xwindows backend. If you need to import[6d# pyplot, do it after setting `Agg` as the backend.[7d[39m(B[mmatplotlib.use((B[0;1m[32m'Agg'[39m(B[m)[K[8d[K[9;6Hsource (B[0;1m[36mimport[39m(B[m TEST_PATH[K[10;6Hsource (B[0;1m[36mimport[39m(B[m VALIDATION_PATH   [11;6Hsource (B[0;1m[36mimport[39m(B[m TRAIN_PATH  [12d[K[13d(B[0;1m[36mfrom[39m(B[m CNN (B[0;1m[36mimport[39m(B[m CNN[14d[K[15d(B[0;1m[31m# Create a file logger[16d[39m(B[mlogger = logging.getLogger((B[0;1m[32m'session5'[39m(B[m)[K[17dlogger.setLevel(logging.DEBUG)[K[18dformatter = logging.Formatter((B[0;1m[32m'%(asctime)s %(levelname)s %(message)s'[39m(B[m)[19dfile_handler = logging.FileHandler((B[0;1m[32m'session5.log'[39m(B[m)[20dfile_handler.setLevel(logging.DEBUG)[21dfile_handler.setFormatter(formatter)[22dlogger.addHandler(file_handler)[12d[13d[14d[15d[16d[17d[18d[23d[K[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[13;1Hconsole_handler = logging.StreamHandler()[14dconsole_handler.setLevel(logging.DEBUG)[15dconsole_handler.setFormatter(formatter)[16dlogger.addHandler(console_handler)[18d(B[0;1m[31m# Do cross-validation to find best parameters[19d[39m(B[mcross_validate = True[20d(B[0;1m[31m# Load pre-trained model or generate from scratch[21d[39m(B[mload_model = False[22d(B[0;1m[31m# select number of epochs[12d[39m(B[m[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[2;23r8[23d[11S[1;25r[2;1H[K[12dn_epochs = 50[15d(B[0;1m[36mdef[34m get_model[39m(B[m(model_id, image_size): (B[0;1m[31m # type: (int, int) -> Model[16;5H[32m""" Gets a model by its id.[18d     Args:[19d         model_id: model id[20d         image_size: dimension of the image in pixels in width or height[21d            (squared images are expected)[22d     """[12d[39m(B[m[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[2;23r8[23d[11S[1;25r[13;5H(B[0;1m[36mdef[34m _model1[39m(B[m():[14;9Hmain_input = Input(shape=(image_size, image_size, 3),[15;28Hdtype=(B[0;1m[32m'float32'[39m(B[m,[16;28Hname=(B[0;1m[32m'main_input'[39m(B[m)[18;9Hx = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv1'[39m(B[m)(main_input)[19;9Hx = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv2'[39m(B[m)(x)[20;9Hx = MaxPooling2D(pool_size=(4, 4), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool'[39m(B[m)(x)[21;9Hx = Flatten()(x)[22;9Hx = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;9Hx = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[13;9Hx = Dropout(0.5)(x)[15;9Hmain_output = Dense([16;13Hunits=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[18;8H(B[0;1m[31m # Compile the model[19;9H[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model1'[39m(B[m)[21;5H(B[0;1m[36mdef[34m _model2[39m(B[m():[22;9Hmain_input = Input(shape=(image_size, image_size, 3),[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d[3d[K[4;9Hmain_output = Dense([K[5;13Hunits=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[7;8H(B[0;1m[31m # Compile the model[39m(B[m[K[8;9H(B[0;1m[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model1'[39m(B[m)[9d[K[10;5H(B[0;1m[36mdef[34m _model2[39m(B[m():[K[11;9Hmain_input = Input(shape=(image_size, image_size, 3),[12;27H[1K dtype=(B[0;1m[32m'float32'[39m(B[m,[K[13;27H[1K name=(B[0;1m[32m'main_input'[39m(B[m)[14;9Hx = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv1'[39m(B[m)(main_input)[15;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool1'[39m(B[m)(x)[16;9Hx = Conv2D(16, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv2'[39m(B[m)(x)[17;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool2'[39m(B[m)(x)[18;8H x = Flatten()(x)   [19;9Hx = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[K[20;9Hx = Dropout(0.5)(x)[21;5H    x = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[22;9Hx = Dropout(0.5)(x)[K[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d[2;22r[2;1H[8T[1;25r[3;9Hx = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv1'[39m(B[m)(main_input)[4;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool1'[39m(B[m)(x)[5;9Hx = Conv2D(16, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv2'[39m(B[m)(x)[6;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool2'[39m(B[m)(x)[7;9Hx = Flatten()(x)[8;9Hx = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[9;9Hx = Dropout(0.5)(x)[10;9Hx = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[11;9Hx = Dropout(0.5)(x)[16;73H(B[0;1m[32m2[18;15H[34m3[22;20H[39m(B[m64[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d[2;22r[2;1H[8T[1;25r[4;8H(B[0;1m[31m # Compile the model[5;9H[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model2'[39m(B[m)[7;5H(B[0;1m[36mdef[34m _model3[39m(B[m():[8;9Hmain_input = Input(shape=(image_size, image_size, 3),[9;28Hdtype=(B[0;1m[32m'float32'[39m(B[m,[10;28Hname=(B[0;1m[32m'main_input'[39m(B[m)[11;20H64[13d32[A[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d[3;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool2'[39m(B[m)(x)[4;8H x = Flatten()(x)   [5;9Hx = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[K[6;9Hx = Dropout(0.5)(x)[7;5H    x = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[8;9Hx = Dropout(0.5)(x)[K[9;9Hmain_output = Dense([K[10;13Hunits=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[11d[K[12;8H(B[0;1m[31m # Compile the model[39m(B[m[K[13;9H(B[0;1m[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model3'[39m(B[m)[14d[K[15;5H(B[0;1m[36mreturn[39m(B[m {[K[16;9H1: _model1(),[K[17;9H2: _model2(),[K[18;9H3: _model3()[K[19;5H}.get(model_id)[K[20d[K[21d[K[22d(B[0;1m[36mdef[34m get_optimizer[39m(B[m(optimizer_id,[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;19Hlearning_rate): (B[0;1m[31m # type: (int, int) -> optimizer[13;5H[32m""" Gets a optimizer by its id.[15d     Args:[16d         optimizer_id: optimizer id[17d         learning_rate: learning rate of the optimizer[18d    """[20;5H[36mif[39m(B[m optimizer_id == 1:[21;9Hoptimizer = optimizers.SGD(lr=learning_rate)[22;5H(B[0;1m[36melif[39m(B[m optimizer_id == 2:[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;9Hoptimizer = optimizers.RMSprop(lr=learning_rate)[13;5H(B[0;1m[36melif[39m(B[m optimizer_id == 3:[14;9Hoptimizer = optimizers.Adam(lr=learning_rate)[15;5H(B[0;1m[36melse[39m(B[m:[16doptimizer = optimizers.Adadelta(lr=learning_rate)[18;5H(B[0;1m[36mreturn[39m(B[m optimizer[21d(B[0;1m[36mdef[34m do_cross_validation[39m(B[m():[22;4H(B[0;1m[31m # Random Search[12d[39m(B[m[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;4H(B[0;1m[31m # Note the batch size is going to be multiplied cause of data-augmentation[13;5H[39m(B[mbounds = [[14;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'model_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[15;10H(B[0;1m[32m'domain'[39m(B[m: (3,)},[16;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'image_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[17;10H(B[0;1m[32m'domain'[39m(B[m: (256,)},[18;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'batch_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[19;10H(B[0;1m[32m'domain'[39m(B[m: (64,)},[20;8H(B[0;1m[31m # {'name': 'batch_size', 'type': 'discrete',[21;8H #  'domain': (16, 32, 64)},[22;9H[39m(B[m{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'optimizer_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[12d[13d[14d[15d[16d[17d[18d[17;28H[1;94H(B[0;7mModificado[17;21H(B[m6256,)},[22G4256,)},[23G[1P[1P[1P[23d(B[0;7mNombre del archivo a escribir: source/session5.py                                                        [24;16H(B[m      (B[0;7mM-D(B[m Format DOS       (B[0;7mM-A(B[m AÃ±adir           (B[0;7mM-B(B[m Respald fich[K[25;2H(B[0;7mC(B[m Cancelar          (B[0;7mM-M(B[m Format Mac       (B[0;7mM-P(B[m Anteponer        (B[0;7m^T(B[m A Ficheros[K[23;50H[?25l[23;41H[39;49m(B[m[1K (B[0;7m[ 259 lÃ­neas escritas ](B[m[K[17;23H[?12l[?25h[1;94H(B[0;7m          [24;16H^O(B[m Guardar     (B[0;7m^W(B[m Buscar      (B[0;7m^K(B[m Cortar Texto(B[0;7m^J(B[m Justificar  (B[0;7m^C(B[m PosiciÃ³n    (B[0;7m^Y(B[m PÃ¡g. ant.[25;2H(B[0;7mX(B[m Salir       (B[0;7m^R(B[m Leer fich.  (B[0;7m^\(B[m Reemplazar  (B[0;7m^U(B[m Pegar txt   (B[0;7m^T(B[m Corrector   (B[0;7m^_(B[m Ir a lÃ­nea  (B[0;7m^V(B[m PÃ¡g. sig.[17;23H[18d[19d[20d[21d[22d[3;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'model_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[K[4;9H[1K (B[0;1m[32m'domain'[39m(B[m: (3,)},[5;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'image_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[K[6;10H(B[0;1m[32m'domain'[39m(B[m: (64,)},[7;5H    {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'batch_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[8;10H(B[0;1m[32m'domain'[39m(B[m: (64,)},[9;8H(B[0;1m[31m # {'name': 'batch_size', 'type': 'discrete',[10;7H[39m(B[m[1K (B[0;1m[31m #  'domain': (16, 32, 64)},[11;8H[39m(B[m[1K {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'optimizer_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[12;9H[1K (B[0;1m[32m'domain'[39m(B[m: (4,)},[K[13;5H   (B[0;1m[31m # {'name': 'optimizer_id', 'type': 'discrete',[14;8H #  'domain': (1, 2, 3, 4)},[39m(B[m[K[15;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'lr'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[16;9H(B[0;1m[31m # 'domain': (1, 0.1, 0.01, 0.001, 0.0001)}][17;21H[39m(B[m1,)}] [18d[K[19;5Hoptimizer = BayesianOptimization(f=train_and_validate,[20;37H[1K domain=bounds, [21;37H[1K verbosity=True)[22;5Hoptimizer.run_optimization(max_iter=1,[K[12;23H[13d[A[A[A[A[A[A[A[A[A[A[2;22r[2;1H[11T[1;25r[3;9Hoptimizer = optimizers.Adam(lr=learning_rate)[4;5H(B[0;1m[36melse[39m(B[m:[5doptimizer = optimizers.Adadelta(lr=learning_rate)[7;5H(B[0;1m[36mreturn[39m(B[m optimizer[10d(B[0;1m[36mdef[34m do_cross_validation[39m(B[m():[11;4H(B[0;1m[31m # Random Search[12;4H # Note the batch size is going to be multiplied cause of data-augmentation[13;5H[39m(B[mbounds = [[12;23H[A[12;23H[13;15H[14;23H[15d[16d[23d[K[17;23H[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;10H(B[0;1m[32m'domain'[39m(B[m: (4,)},[13;8H(B[0;1m[31m # {'name': 'optimizer_id', 'type': 'discrete',[14;8H #  'domain': (1, 2, 3, 4)},[15;9H[39m(B[m{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'lr'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[16;9H(B[0;1m[31m # 'domain': (1, 0.1, 0.01, 0.001, 0.0001)}][17;10H[32m'domain'[39m(B[m: (1,)}][19;5Hoptimizer = BayesianOptimization(f=train_and_validate,[20;38Hdomain=bounds,[21;38Hverbosity=True)[22;5Hoptimizer.run_optimization(max_iter=1,[12;23H[13d[14d[15d[16d[17d[18d[19;23H[20d[21d[22d[A[A[21d[22d[22;43H[1;94H(B[0;7mModificado[22;41H(B[m,[K5,[3d(B[0;1m[32m    """[39m(B[m[K[4d[K[5;5H(B[0;1m[36mif[39m(B[m optimizer_id == 1:[K[6;9Hoptimizer = optimizers.SGD(lr=learning_rate)[7;5H(B[0;1m[36melif[39m(B[m optimizer_id == 2:[K[8;9Hoptimizer = optimizers.RMSprop(lr=learning_rate)[9;5H(B[0;1m[36melif[39m(B[m optimizer_id == 3:[K[10;8H optimizer = optimizers.Adam(lr=learning_rate)[11;5H(B[0;1m[36melse[39m(B[m:[K[12doptimizer = optimizers.Adadelta(lr=learning_rate)[13d[K[14;5H(B[0;1m[36mreturn[39m(B[m optimizer[K[15d[K[16d[K[17d(B[0;1m[36mdef[34m do_cross_validation[39m(B[m():[18;4H(B[0;1m[31m # Random Search[19;4H # Note the batch size is going to be multiplied cause of data-augmentation[20;5H[39m(B[mbounds = [[K[21;9H{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'model_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[K[22;9H[1K (B[0;1m[32m'domain'[39m(B[m: (3,)},[K[3d[K[4;8H(B[0;1m[31m # Compile the model[5;5H[39m(B[m    (B[0;1m[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model3'[39m(B[m)[6d[K[7;5H(B[0;1m[36mreturn[39m(B[m {[K[8;9H1: _model1(),[K[9;5H    2: _model2(),[K[10;9H3: _model3()[K[11;5H}.get(model_id)[12d[K[14d(B[0;1m[36mdef[34m get_optimizer[39m(B[m(optimizer_id,[15;19Hlearning_rate): (B[0;1m[31m # type: (int, int) -> optimizer[16;5H[32m""" Gets a optimizer by its id.[17d[39m(B[m[K[18d(B[0;1m[32m     Args:[39m(B[m[K[19d(B[0;1m[32m         optimizer_id: optimizer id[39m(B[m[K[20d(B[0;1m[32m         learning_rate: learning rate of the optimizer[21d    """[39m(B[m[K[22d[K[3d[8G(B[0;1m[31m # Compile the model[4;8H[39m(B[m (B[0;1m[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model2'[39m(B[m)[5d[K[6;5H(B[0;1m[36mdef[34m _model3[39m(B[m():[7;5H    main_input = Input(shape=(image_size, image_size, 3),[8;27H[1K dtype=(B[0;1m[32m'float32'[39m(B[m,[9;27H[1K name=(B[0;1m[32m'main_input'[39m(B[m)[10;9Hx = Conv2D(64, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv1'[39m(B[m)(main_input)[11;5H    x = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool1'[39m(B[m)(x)[12;9Hx = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv2'[39m(B[m)(x)[13;9Hx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool2'[39m(B[m)(x)[14;8H[1K x = Flatten()(x)[K[15;9Hx = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[K[16;5H    x = Dropout(0.5)(x)[K[17;9Hx = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[18;8H[1K x = Dropout(0.5)(x)[19;8H[1K main_output = Dense([K[20;12H[1K units=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[21d[K[22;8H(B[0;1m[31m # Compile the model[3d[39m(B[m[3;23r[23;1H
[1;25r[3;73H(B[0;1m[32m1[5;15H[34m2[9;20H[39m(B[m32[11d16[22;9H(B[0;1m[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model2'[39m(B[m)[3d[3;8r[8;1H
[1;25r[10;14r[14;1H
[1;25r[16;23r[23;1H
[1;25r[4;15H(B[0;1m[34m1[10;20H[39m(B[m32[11;37H4, 4[11;71H[1P[14;9Hx = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[16d[K[21;73H(B[0;1m[32m1[3d[39m(B[mlogger.addHandler(console_handler)[4d[K[5d(B[0;1m[31m# Do cross-validation to find best parameters[39m(B[m[K[6dcross_validate = True[K[7d(B[0;1m[31m# Load pre-trained model or generate from scratch[8d[39m(B[mload_model = False[9d(B[0;1m[31m# select number of epochs[39m(B[m[K[10dn_epochs = 50[K[11d[K[12d[K[13d(B[0;1m[36mdef[34m get_model[39m(B[m(model_id, image_size): (B[0;1m[31m # type: (int, int) -> Model[14;5H[32m""" Gets a model by its id.[39m(B[m[K[15d[K[16d(B[0;1m[32m     Args:[17d         model_id: model id[39m(B[m [18d(B[0;1m[32m         image_size: dimension of the image in pixels in width or height[19d            (squared images are expected)[20d     """[39m(B[m[K[21d[K[22;5H(B[0;1m[36mdef[34m _model1[39m(B[m():[3d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m TEST_PATH[K[4d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m VALIDATION_PATH[5d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m TRAIN_PATH[K[6d[K[7d(B[0;1m[36mfrom[39m(B[m CNN (B[0;1m[36mimport[39m(B[m CNN[K[8d[K[9;3H(B[0;1m[31mCreate a file logger[39m(B[m   [10dlogger = logging.getLogger((B[0;1m[32m'session5'[39m(B[m)[11dlogger.setLevel(logging.DEBUG)[12dformatter = logging.Formatter((B[0;1m[32m'%(asctime)s %(levelname)s %(message)s'[39m(B[m)[13dfile_handler = logging.FileHandler((B[0;1m[32m'session5.log'[39m(B[m)[K[14dfile_handler.setLevel(logging.DEBUG)[15dfile_handler.setFormatter(formatter)[16dlogger.addHandler(file_handler)[17d[K[18dconsole_handler = logging.StreamHandler()[K[19dconsole_handler.setLevel(logging.DEBUG)  [20dconsole_handler.setFormatter(formatter)[21dlogger.addHandler(console_handler)[22d[K[3d(B[0;1m[31m# Config to run on one GPU[39m(B[m  [4dos.environ[(B[0;1m[32m"CUDA_VISIBLE_DEVICES"[39m(B[m] = getpass.getuser()[-1][5d[K[6d(B[0;1m[36mfrom[39m(B[m GPyOpt.methods (B[0;1m[36mimport[39m(B[m BayesianOptimization[7;6Hkeras (B[0;1m[36mimport[39m(B[m Input, optimizers[8d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dropout[9d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Dense[10d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Flatten[K[11d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m MaxPooling2D[12d(B[0;1m[36mfrom[39m(B[m keras.layers (B[0;1m[36mimport[39m(B[m Conv2D[K[13d(B[0;1m[36mfrom[39m(B[m keras.models (B[0;1m[36mimport[39m(B[m Model[K[14d(B[0;1m[36mimport[39m(B[m numpy (B[0;1m[36mas[39m(B[m np[K[15d(B[0;1m[36mimport[39m(B[m matplotlib[K[16d[K[17d(B[0;1m[31m# Force matplotlib to not use any Xwindows backend. If you need to import[18d# pyplot, do it after setting `Agg` as the backend.[19d[39m(B[mmatplotlib.use((B[0;1m[32m'Agg'[39m(B[m)[K[20d[K[21d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m TEST_PATH[K[22d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m VALIDATION_PATH[3d[4d[5d[6d[7d[8d[9d[10d[11d[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[2;23r8[23d[11S[1;25r[2;1H[K[12d(B[0;1m[36mfrom[39m(B[m source (B[0;1m[36mimport[39m(B[m TRAIN_PATH[14d(B[0;1m[36mfrom[39m(B[m CNN (B[0;1m[36mimport[39m(B[m CNN[16d(B[0;1m[31m# Create a file logger[17d[39m(B[mlogger = logging.getLogger((B[0;1m[32m'session5'[39m(B[m)[18dlogger.setLevel(logging.DEBUG)[19dformatter = logging.Formatter((B[0;1m[32m'%(asctime)s %(levelname)s %(message)s'[39m(B[m)[20dfile_handler = logging.FileHandler((B[0;1m[32m'session5.log'[39m(B[m)[21dfile_handler.setLevel(logging.DEBUG)[22dfile_handler.setFormatter(formatter)[12d[13d[14d[15d[16d[17d[18d[A[18d[19d[20d[21d[22d7[2;23r8[23d[11S[1;25r[12;1Hlogger.addHandler(file_handler)[14dconsole_handler = logging.StreamHandler()[15dconsole_handler.setLevel(logging.DEBUG)[16dconsole_handler.setFormatter(formatter)[17dlogger.addHandler(console_handler)[19d(B[0;1m[31m# Do cross-validation to find best parameters[20d[39m(B[mcross_validate = True[21d(B[0;1m[31m# Load pre-trained model or generate from scratch[22d[39m(B[mload_model = False[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[2;23r8[23d[11S[1;25r[12;1H(B[0;1m[31m# select number of epochs[13d[39m(B[mn_epochs = 50[16d(B[0;1m[36mdef[34m get_model[39m(B[m(model_id, image_size): (B[0;1m[31m # type: (int, int) -> Model[17;5H[32m""" Gets a model by its id.[19d     Args:[20d         model_id: model id[21d         image_size: dimension of the image in pixels in width or height[22d            (squared images are expected)[12d[39m(B[m[13d[14d[15d[A[A[13;14H0[K1000[23d(B[0;7mNombre del archivo a escribir: source/session5.py                                                        [24;16H(B[m      (B[0;7mM-D(B[m Format DOS       (B[0;7mM-A(B[m AÃ±adir           (B[0;7mM-B(B[m Respald fich[K[25;2H(B[0;7mC(B[m Cancelar          (B[0;7mM-M(B[m Format Mac       (B[0;7mM-P(B[m Anteponer        (B[0;7m^T(B[m A Ficheros[K[23;50H[?25l[23;41H[39;49m(B[m[1K (B[0;7m[ 259 lÃ­neas escritas ](B[m[K[13;14H[?12l[?25h[1;94H(B[0;7m          [24;16H^O(B[m Guardar     (B[0;7m^W(B[m Buscar      (B[0;7m^K(B[m Cortar Texto(B[0;7m^J(B[m Justificar  (B[0;7m^C(B[m PosiciÃ³n    (B[0;7m^Y(B[m PÃ¡g. ant.[25;2H(B[0;7mX(B[m Salir       (B[0;7m^R(B[m Leer fich.  (B[0;7m^\(B[m Reemplazar  (B[0;7m^U(B[m Pegar txt   (B[0;7m^T(B[m Corrector   (B[0;7m^_(B[m Ir a lÃ­nea  (B[0;7m^V(B[m PÃ¡g. sig.[13;14H0[3d(B[0;1m[32m         image_size: dimension of the image in pixels in width or height[4d            (squared images are expected)[5d     """[39m(B[m[K[6d[K[7;5H(B[0;1m[36mdef[34m _model1[39m(B[m():[8;8H[1K main_input = Input(shape=(image_size, image_size, 3),[9;27H[1K dtype=(B[0;1m[32m'float32'[39m(B[m,[10;27H[1K name=(B[0;1m[32m'main_input'[39m(B[m)[K[11d[K[12;8H[1K x = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv1'[39m(B[m)(main_input)[13;8H[1K x = Conv2D(32, (3, 3), activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'conv2'[39m(B[m)(x)[14;9Hx = MaxPooling2D(pool_size=(4, 4), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool'[39m(B[m)(x)[15;9Hx = Flatten()(x)[16;8H[1K x = Dense(256, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc1'[39m(B[m)(x)[K[17;5H    x = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[18;9Hx = Dropout(0.5)(x)[19d[K[20;8H[1K main_output = Dense([21;12H[1K units=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[K[22d[K[3d[13;17r[13;1HM[1;25r[6;11r[6;1HM[1;25r[3;12H[1K units=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[K[4d[K[5;7H[1K (B[0;1m[31m # Compile the model[6;9H[36mreturn[39m(B[m Model(inputs=main_input, outputs=main_output, name=(B[0;1m[32m'model1'[39m(B[m)[8;15H(B[0;1m[34m2[13;9H[39m(B[mx = MaxPooling2D(pool_size=(2, 2), padding=(B[0;1m[32m'valid'[39m(B[m, name=(B[0;1m[32m'pool1'[39m(B[m)(x)[14;20H16[15;37H2, 2[15;71H(B[0;1m[32m2'[39m(B[m)(x)[19;9Hx = Dense(128, activation=(B[0;1m[32m'relu'[39m(B[m, name=(B[0;1m[32m'fc2'[39m(B[m)(x)[20;9Hx = Dropout(0.5)(x) [21;9Hmain_output = Dense([K[22;13Hunits=8, activation=(B[0;1m[32m'softmax'[39m(B[m, name=(B[0;1m[32m'predictions'[39m(B[m)(x)[3d[2;22r[2;1HM[1;25r[3;9Hmain_output = Dense([7;73H(B[0;1m[32m2[9;15H[34m3[13;20H[39m(B[m64[15d32[3d[2;10r[2;1HM[1;25r[3;9Hx = Dropout(0.5)(x)[8;73H(B[0;1m[32m3[10;5H[36mreturn[39m(B[m {[K[11;9H1: _model1(),[K[12;9H2: _model2(),[K[13;9H3: _model3()[K[14;5H}.get(model_id)[K[15d[K[16d[K[17d(B[0;1m[36mdef[34m get_optimizer[39m(B[m(optimizer_id,[18;18H[1K learning_rate): (B[0;1m[31m # type: (int, int) -> optimizer[19;5H[32m""" Gets a optimizer by its id.[20d[39m(B[m[K[21d(B[0;1m[32m     Args:[39m(B[m[K[22d(B[0;1m[32m         optimizer_id: optimizer id[3d[39m(B[m(B[0;1m[32m     Args:[39m(B[m[K[4d(B[0;1m[32m         optimizer_id: optimizer id[5d         learning_rate: learning rate of the optimizer[39m(B[m[K[6d(B[0;1m[32m    """[7d[39m(B[m[K[8;5H(B[0;1m[36mif[39m(B[m optimizer_id == 1:[K[9;9Hoptimizer = optimizers.SGD(lr=learning_rate)[10;5H(B[0;1m[36melif[39m(B[m optimizer_id == 2:[11;9Hoptimizer = optimizers.RMSprop(lr=learning_rate)[12;5H(B[0;1m[36melif[39m(B[m optimizer_id == 3:[13;9Hoptimizer = optimizers.Adam(lr=learning_rate)[14;5H(B[0;1m[36melse[39m(B[m:[K[15doptimizer = optimizers.Adadelta(lr=learning_rate)[17d    (B[0;1m[36mreturn[39m(B[m optimizer[K[18d[K[19d[K[20d(B[0;1m[36mdef[34m do_cross_validation[39m(B[m():[21d   (B[0;1m[31m # Random Search[22d[39m(B[m   (B[0;1m[31m # Note the batch size is going to be multiplied cause of data-augmentation[3d[39m(B[m   (B[0;1m[31m # Random Search[4d[39m(B[m   (B[0;1m[31m # Note the batch size is going to be multiplied cause of data-augmentation[5d[39m(B[m    bounds = [[K[6;8H[1K {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'model_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[7;10H(B[0;1m[32m'domain'[39m(B[m: (3,)},[8;5H    {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'image_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[9;9H (B[0;1m[32m'domain'[39m(B[m: (64,)},[K[10;5H    {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'batch_size'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[11;9H (B[0;1m[32m'domain'[39m(B[m: (64,)},[K[12;5H   (B[0;1m[31m # {'name': 'batch_size', 'type': 'discrete',[13;8H #  'domain': (16, 32, 64)},[39m(B[m[K[14;5H    {(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'optimizer_id'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[15;9H (B[0;1m[32m'domain'[39m(B[m: (4,)},[K[16;8H(B[0;1m[31m # {'name': 'optimizer_id', 'type': 'discrete',[17;5H[39m(B[m   (B[0;1m[31m #  'domain': (1, 2, 3, 4)},[18;9H[39m(B[m{(B[0;1m[32m'name'[39m(B[m: (B[0;1m[32m'lr'[39m(B[m, (B[0;1m[32m'type'[39m(B[m: (B[0;1m[32m'discrete'[39m(B[m,[19;9H(B[0;1m[31m # 'domain': (1, 0.1, 0.01, 0.001, 0.0001)}][20;9H[39m(B[m[1K (B[0;1m[32m'domain'[39m(B[m: (1,)}] [21d[K[22;4H optimizer = BayesianOptimization(f=train_and_validate,[K[3d[4d[5d[6d[7d[8d[9d[10d[11d[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[23d[K[A7[2;23r8[23d[11S[1;25r[2;1H[K[12;38Hdomain=bounds,[13;38Hverbosity=True)[14;5Hoptimizer.run_optimization(max_iter=5,[15;32Hverbosity=True,[16;32Hreport_file=(B[0;1m[32m'optimizer_results.txt'[39m(B[m)[17;5Hlogger.info((B[0;1m[32m'optimized parameters: {}'[39m(B[m.format(optimizer.x_opt))[18;5Hlogger.info((B[0;1m[32m'optimized accuracy: {}'[39m(B[m.format(optimizer.fx_opt))[21d(B[0;1m[36mdef[34m train_and_validate[39m(B[m(bounds):[22;5Hb = bounds.astype(np.int64)[12d[13d[14d[15d[16d[17d[18d[19d[20d[21d[22d7[3;23r8[23d[11S[1;25r[12;5Hmodel_id, image_size, batch_size, optimizer_id, lr = \[13;9Hb[:, 0][0], b[:, 1][0], b[:, 2][0], b[:, 3][0], b[:, 4][0][14;5Hlogger.info((B[0;1m[32m'Bounds in action {}'[39m(B[m.format(bounds))[15;5Htimestamp = int(time.time())[16;5HMODEL_PATH = (B[0;1m[32m'results/session5/CNN_{}_{}.h5'[39m(B[m.format(model_id, timestamp)[17;5Hneural_network = CNN(logger,[18;26Htrain_path=TRAIN_PATH,[19;26Hvalidation_path=VALIDATION_PATH,[20;26Htest_path=TEST_PATH,[21;26Hmodel_fname=MODEL_PATH)[12d[13d[14d[15d[3;25H[1K model_fname=MODEL_PATH)[4d[K[5;4H(B[0;1m[31m # Hyper-parameters selection[39m(B[m[K[6;5Hneural_network.set_batch_size(batch_size)[K[7;5Hneural_network.set_model([K[8;9Hmodel=get_model(model_id=model_id, image_size=image_size))[9;5Hneural_network.set_optimizer(get_optimizer(optimizer_id, lr))[10d    neural_network.set_loss_function((B[0;1m[32m'categorical_crossentropy'[39m(B[m)[11;5Hneural_network.set_metrics([(B[0;1m[32m'accuracy'[39m(B[m])[12d[K[13;4H(B[0;1m[31m # Configure and build the NN[39m(B[m[K[14;5Hneural_network.configure()[K[15;5Hneural_network.build()[K[16d[K[17;4H(B[0;1m[31m # Train[39m(B[m[K[18;5Hneural_network.train_CNN_model(n_epochs=n_epochs,[19;35H[1K steps_per_epoch_multiplier=10,[20;35H[1K validation_steps_multiplier=1)[21d[K[22;5Hneural_network.plot_history([3d[K[4;5Hneural_network.plot_history([5;8H[1K (B[0;1m[32m'results/session5/CNN_{}_{}'[39m(B[m.format(model_id, timestamp))[6;20Hplot_results([K[7;5H    (B[0;1m[32m'results/session5/CNN_{}_{}'[39m(B[m.format(model_id, timestamp))[8d[K[9;5Hscore, evaluator = neural_network.get_results()[K[10;5H(B[0;1m[36mreturn[39m(B[m np.array(evaluator.accuracy, dtype=np.float64)[K[11d[K[13d(B[0;1m[36mif[39m(B[m __name__ == (B[0;1m[32m"__main__"[39m(B[m:[K[14;5Hinit = time.tim[8P[15d[K[16;4H(B[0;1m[31m # Train and validate the model optimizing hyper-parameters[17;4H[39m(B[m (B[0;1m[36mif[39m(B[m cross_validate:[18;5H    do_cross_validation()[K[19d[K[20;4H(B[0;1m[31m # Load the model if exists, train otherwise[39m(B[m[K[21;5H(B[0;1m[36melse[39m(B[m:[22;5H    MODEL_PATH = (B[0;1m[32m'results/session5/my_CNN.h5'[3d[39m(B[m    (B[0;1m[36melse[39m(B[m:[4;5H    MODEL_PATH = (B[0;1m[32m'results/session5/my_CNN.h5'[5;9H[39m(B[mneural_network = CNN(logger,[K[6;29H[1K train_path=TRAIN_PATH,[7;29H[1K validation_path=VALIDATION_PATH,[K[8;30Htest_path=TEST_PATH,[9;29H[1K model_fname=MODEL_PATH)[10d[K[11;9H(B[0;1m[36mif[39m(B[m load_model:[12;13Hneural_network.load_CNN_model()[13;8H[1K (B[0;1m[36melse[39m(B[m:[K[14;11H[1K (B[0;1m[31m # Hyper-parameters selection[15;13H[39m(B[mneural_network.set_batch_size(16)[16;12H[1K neural_network.set_model([K[17;16H[1K model=get_model(model_id=2, image_size=64))[18;9H    neural_network.set_optimizer(optimizers.Adadelta(lr=0.1))[19;13Hneural_network.set_loss_function((B[0;1m[32m'categorical_crossentropy'[39m(B[m)[20;12H[1K neural_network.set_metrics([(B[0;1m[32m'accuracy'[39m(B[m])[21d[K[22;9H    neural_network.configure()[K[3d[K[4;9H    neural_network.configure()[K[5;9H    neural_network.build()  [6d[K[7;13Hneural_network.train_CNN_model(n_epochs=n_epochs[8;43H[1K steps_per_epoch_multiplier=8,[9;43H[1K validation_steps_multiplier=1)[11;9H    neural_network.plot_history((B[0;1m[32m'results/session5/my_CNN'[39m(B[m)[12d[K[13;9Hneural_network.plot_results((B[0;1m[32m'results/session5/my_CNN'[39m(B[m)[14d[K[15;5Hend = time.time()[K[16;5Hlogger.info((B[0;1m[32m'Everything done in {} secs.\n'[39m(B[m.format(str(end - init)))[17d[K[18d[K[19d[K[20d[K[22d[K[3d[17d[24d[J[25;105H[25;1H[?1049l[?1l>[01;32mmaster10@etse-75-51[00m:[01;34m~/scene-classificator[00m$ exit
